# -*- coding: utf-8 -*-
"""AK_chimg_reg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vOyiVWpqfoUHPDbuZ-Fdt3jjpNluXttQ
"""

!pip install autokeras

import tensorflow as tf
import cv2
import numpy as np
import pandas as pd
import autokeras as ak
from tensorflow.keras.datasets import mnist
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Select the Runtime > "Change runtime type" menu to enable a GPU accelerator, ')
  print('and then re-execute this cell.')
else:
  print(gpu_info)

path = '/content/drive/MyDrive/autokeras/500-32x32-non-5L/'
df = pd.read_csv(path + 'pathData.csv')  

width = 1
height = 384
dim = (width, height)

img = []
for i in df['Index'].tolist():
	# img.append(cv2.resize(cv2.imread(path + str(i) + ".png", 0), dim))
  img.append(cv2.imread(path + str(i) + ".png", 0))

# df['Image'] = img
img = np.array(img)

# Drop unwated col
df = df.drop(['Index', 'MaxPixel', 'NumPaths'], axis=1)
T_col = [col for col in df.columns if 'T_' in col]
AoA_col = [col for col in df.columns if 'AoA_' in col]
ZoA_col = [col for col in df.columns if 'AoZ_' in col]
col = T_col
df = df[col]

# Scale the chosen regressors
x = df.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df = pd.DataFrame(x_scaled, columns=df.columns)

split = train_test_split(df, img, test_size=0.20, random_state=42)
(y_train, y_test, x_train, x_test) = split

# Initialize the image regressor.
reg = ak.ImageRegressor(overwrite=False, max_trials=10)
# Feed the image regressor with training data.
reg.fit(x_train, y_train, validation_split=0.15, epochs=200)

# Export as a Keras Model.
model = reg.export_model()

print(type(model))  # <class 'tensorflow.python.keras.engine.training.Model'>

try:
    model.save("model_autokeras_delay", save_format="tf")
except Exception:
    model.save("model_autokeras_delay.h5")

predicted_y = model.predict(tf.expand_dims(x_test, -1))
print(model.evaluate(x_test, y_test))

df_pred = pd.DataFrame(min_max_scaler.inverse_transform(predicted_y), columns=df.columns)
df_true = pd.DataFrame(min_max_scaler.inverse_transform(y_test), columns=df.columns)
df_pred.to_csv('pred.csv')
df_true.to_csv('true.csv')


predicted_y = model.predict(tf.expand_dims(x_test, -1))
print(model.evaluate(x_test, y_test))

df_pred = pd.DataFrame(predicted_y, columns=df.columns)
df_true = pd.DataFrame(y_test, columns=df.columns)

# Commented out IPython magic to ensure Python compatibility.
# %cp -r ./model_autokeras_delay/ "/content/drive/My Drive/autokeras/"
# %cp ./pred.csv "/content/drive/My Drive/autokeras/"
# %cp ./true.csv "/content/drive/My Drive/autokeras/"

for col_name in df_pred.columns:
  plt.scatter(df_pred[col_name], df_true[col_name])
  plt.xlabel("Predicted")
  plt.ylabel("True")
  plt.savefig("./" + col_name + ".png")
  plt.close()

for col_name in df_pred.columns:
  mse = 0
  for i in (df_true[col_name] - df_pred[col_name]):
    mse = mse + (i * i)
  mse = mse / len(df_true[col_name])
  rmse = mse ** 0.5
  print(col_name + ": " + str(rmse))

df_true.subtract(df_pred)